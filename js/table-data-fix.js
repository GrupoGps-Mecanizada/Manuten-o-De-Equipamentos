// Arquivo table-data-fix.js corrigido
// Vers√£o: 1.0.1
// Data: 05/05/2025

console.log('üìä Iniciando corre√ß√£o de dados nas tabelas');

// Fun√ß√£o para verificar se um elemento cont√©m um texto espec√≠fico
function elementContainsText(element, text) {
    return element.textContent.includes(text);
}

// Substitui o seletor :contains inv√°lido com uma fun√ß√£o customizada
function querySelectorContains(selector, containsText) {
    const baseElements = document.querySelectorAll(selector);
    return Array.from(baseElements).filter(el => elementContainsText(el, containsText));
}

// Observer para detectar mudan√ßas na tabela
const tableObserver = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
            console.log('üîç Muta√ß√£o detectada na tabela, aplicando corre√ß√µes...');
            try {
                fixTableData();
            } catch (error) {
                console.error('‚ùå Erro ao aplicar corre√ß√µes √† tabela:', error);
            }
        }
    });
});

// Configura√ß√£o do observer
function setupTableObserver() {
    const tableContainers = document.querySelectorAll('.table-container, .table-responsive');
    
    if (tableContainers.length > 0) {
        tableContainers.forEach(container => {
            tableObserver.observe(container, { childList: true, subtree: true });
        });
        console.log('üëÅÔ∏è Observer de tabela configurado para', tableContainers.length, 'containers');
    } else {
        // Se n√£o encontrar no carregamento inicial, tentar novamente ap√≥s um curto atraso
        setTimeout(setupTableObserver, 500);
    }
}

// Inicializar observer ap√≥s o carregamento do DOM
document.addEventListener('DOMContentLoaded', setupTableObserver);

// Se o DOM j√° estiver carregado, inicializar imediatamente
if (document.readyState === 'interactive' || document.readyState === 'complete') {
    setupTableObserver();
}

// Fun√ß√£o principal para corrigir dados das tabelas
function fixTableData() {
    console.log('üîß Aplicando corre√ß√µes aos dados das tabelas');
    
    try {
        // Corrigir c√©lulas "N√£o atribu√≠do"
        const naoAtribuidoCells = querySelectorContains('td', 'N√£o atribu√≠do');
        naoAtribuidoCells.forEach(cell => {
            cell.classList.add('status-warning');
            cell.title = 'Este item precisa ser atribu√≠do';
        });
        
        // Corrigir c√©lulas "N√£o especificada"
        const naoEspecificadaCells = querySelectorContains('td', 'N√£o especificada');
        naoEspecificadaCells.forEach(cell => {
            cell.classList.add('status-info');
            cell.title = 'Especifica√ß√£o pendente';
        });
        
        // Destacar status cr√≠ticos
        const criticoCells = querySelectorContains('td', 'Cr√≠tico');
        criticoCells.forEach(cell => {
            cell.classList.add('status-danger');
            cell.style.fontWeight = 'bold';
        });
        
        // Destacar status de sucesso
        const concluido = ['Conclu√≠do', 'Aprovado', 'Finalizado'];
        concluido.forEach(texto => {
            const cells = querySelectorContains('td', texto);
            cells.forEach(cell => {
                cell.classList.add('status-success');
            });
        });
        
        // Destacar status pendentes
        const pendente = ['Pendente', 'Em an√°lise', 'Em andamento'];
        pendente.forEach(texto => {
            const cells = querySelectorContains('td', texto);
            cells.forEach(cell => {
                cell.classList.add('status-pending');
            });
        });
        
        console.log('‚úÖ Corre√ß√µes aplicadas √†s tabelas com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao aplicar corre√ß√µes √†s tabelas:', error);
    }
}

// Exportar fun√ß√µes para uso global
window.TableDataFix = {
    applyFixes: fixTableData,
    querySelectorContains: querySelectorContains
};

console.log('‚úÖ M√≥dulo de corre√ß√£o de tabelas carregado e pronto');
