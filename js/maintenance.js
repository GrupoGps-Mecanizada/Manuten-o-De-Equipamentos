// Verificar depend√™ncias no in√≠cio
if (!window.API || !window.Utilities) {
  console.error("Erro CR√çTICO: Depend√™ncias API ou Utilities n√£o carregadas antes de maintenance.js");
} else {
  console.log("Maintenance.js - Depend√™ncias API e Utilities parecem carregadas.");
}

// Definir o m√≥dulo Maintenance com funcionalidade m√≠nima para operar
const Maintenance = (() => {
  // --- Vari√°veis Locais ---
  const EQUIPMENT_IDS = {
    'Alta Press√£o': ["PUB-2G02","LUX-3201","FLX7617","EZS-8765","EZS-8764","EVK-0291"],
    'Auto V√°cuo / Hiper V√°cuo': ["PUB-2F80","NFF-0235","HJS-1097","FSA-3D71","EGC-2993"]
  };
  
  let formData = {};
  let isEditMode = false;
  let editingMaintenanceId = null;
  let fullMaintenanceList = [];
  
  // --- Fun√ß√£o de Inicializa√ß√£o ---
  function initialize() {
    console.log("Maintenance.initialize() chamado.");
    
    // Configurar listeners b√°sicos
    setupBasicListeners();
    
    // Carregar lista de manuten√ß√µes
    loadMaintenanceList();
  }
  
  // --- Configura√ß√£o de Listeners ---
  function setupBasicListeners() {
    console.log("Configurando listeners b√°sicos do m√≥dulo Maintenance...");
    
    // Bot√£o para abrir formul√°rio
    const newMaintenanceBtn = document.getElementById('new-maintenance');
    if (newMaintenanceBtn) {
      newMaintenanceBtn.addEventListener('click', function() {
        openMaintenanceForm();
      });
      console.log("Listener configurado para bot√£o 'new-maintenance'");
    } else {
      console.warn("Bot√£o 'new-maintenance' n√£o encontrado no DOM!");
    }
    
    // Bot√µes de etapas
    const nextToStep2Btn = document.getElementById('next-to-step-2');
    if (nextToStep2Btn) {
      nextToStep2Btn.addEventListener('click', function() {
        console.log("Bot√£o para pr√≥xima etapa (1->2) clicado");
        showStep(2);
      });
    }
    
    const backToStep1Btn = document.getElementById('back-to-step-1');
    if (backToStep1Btn) {
      backToStep1Btn.addEventListener('click', function() {
        showStep(1);
      });
    }
    
    const nextToStep3Btn = document.getElementById('next-to-step-3');
    if (nextToStep3Btn) {
      nextToStep3Btn.addEventListener('click', function() {
        console.log("Bot√£o para pr√≥xima etapa (2->3) clicado");
        showStep(3);
      });
    }
    
    const backToStep2Btn = document.getElementById('back-to-step-2');
    if (backToStep2Btn) {
      backToStep2Btn.addEventListener('click', function() {
        showStep(2);
      });
    }
    
    // Bot√µes de fechar modal
    const closeButtons = [
      document.getElementById('close-maintenance-form'),
      document.getElementById('cancel-maintenance')
    ];
    
    closeButtons.forEach(btn => {
      if (btn) {
        btn.addEventListener('click', closeForm);
      }
    });
    
    // Form submit
    const form = document.getElementById('maintenance-form');
    if (form) {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        console.log("Formul√°rio submetido");
        // Aqui iria a l√≥gica para salvar os dados
        closeForm();
      });
    }
  }
  
  // --- Fun√ß√µes de UI ---
  function showStep(step) {
    console.log(`Tentando mostrar etapa ${step}`);
    
    // Obter todas as etapas
    const steps = [
      document.getElementById('step-1'),
      document.getElementById('step-2'),
      document.getElementById('step-3')
    ];
    
    // Verificar se todas as etapas existem
    if (steps.some(s => !s)) {
      console.error("Um ou mais elementos de etapa n√£o foram encontrados!");
      return;
    }
    
    // Esconder todas as etapas
    steps.forEach(s => {
      if (s) s.style.display = 'none';
    });
    
    // Mostrar apenas a etapa solicitada
    if (step >= 1 && step <= 3 && steps[step - 1]) {
      steps[step - 1].style.display = 'block';
      console.log(`Etapa ${step} mostrada com sucesso`);
    } else {
      console.error(`Etapa inv√°lida: ${step}`);
    }
    
    // Atualizar indicadores visuais (se existirem)
    const indicators = document.querySelectorAll('.step-indicator');
    indicators.forEach((indicator, index) => {
      if (index + 1 === step) {
        indicator.classList.add('active');
      } else {
        indicator.classList.remove('active');
      }
    });
  }
  
  function openMaintenanceForm(maintenanceId = null, data = null) {
    console.log("Abrindo formul√°rio de manuten√ß√£o");
    
    // Reset do formul√°rio
    resetForm();
    
    // Configurar modo de edi√ß√£o se necess√°rio
    if (maintenanceId && data) {
      isEditMode = true;
      editingMaintenanceId = maintenanceId;
      // Aqui iria o c√≥digo para preencher o formul√°rio com os dados existentes
    } else {
      isEditMode = false;
      editingMaintenanceId = null;
    }
    
    // Mostrar o modal
    const modal = document.getElementById('maintenance-form-modal');
    if (modal) {
      modal.style.display = 'block';
      // Adicionar classe para anima√ß√£o se necess√°rio
      modal.classList.add('active');
    } else {
      console.error("Modal #maintenance-form-modal n√£o encontrado!");
    }
    
    // Garantir que comece na primeira etapa
    showStep(1);
  }
  
  function closeForm() {
    console.log("Fechando formul√°rio");
    
    const modal = document.getElementById('maintenance-form-modal');
    if (modal) {
      // Remover classe ativa (para anima√ß√£o se existir)
      modal.classList.remove('active');
      
      // Esconder ap√≥s um curto delay
      setTimeout(() => {
        modal.style.display = 'none';
        resetForm();
      }, 300);
    }
  }
  
  function resetForm() {
    // Reset b√°sico do formul√°rio
    const form = document.getElementById('maintenance-form');
    if (form) form.reset();
    
    // Limpar estados
    isEditMode = false;
    editingMaintenanceId = null;
    formData = {};
    
    // Voltar para primeira etapa
    showStep(1);
  }
  
  // --- Fun√ß√µes de Dados ---
  function loadMaintenanceList() {
    console.log("Carregando lista de manuten√ß√µes...");
    
    // Indicador de carregamento
    const tableBody = document.getElementById('maintenance-tbody');
    if (tableBody) {
      tableBody.innerHTML = '<tr><td colspan="10" class="text-center">Carregando...</td></tr>';
    }
    
    // Chamar API para obter dados
    if (window.API && typeof API.getMaintenanceList === 'function') {
      API.getMaintenanceList()
        .then(response => {
          if (response && response.success && Array.isArray(response.maintenances)) {
            fullMaintenanceList = response.maintenances;
            renderMaintenanceTable(fullMaintenanceList);
          } else {
            console.error("Erro ao carregar manuten√ß√µes:", response);
            if (tableBody) {
              tableBody.innerHTML = '<tr><td colspan="10" class="text-center error-message">Erro ao carregar dados.</td></tr>';
            }
          }
        })
        .catch(error => {
          console.error("Falha ao buscar manuten√ß√µes:", error);
          if (tableBody) {
            tableBody.innerHTML = '<tr><td colspan="10" class="text-center error-message">Falha ao buscar dados.</td></tr>';
          }
        });
    } else {
      console.error("API.getMaintenanceList n√£o dispon√≠vel");
      if (tableBody) {
        tableBody.innerHTML = '<tr><td colspan="10" class="text-center error-message">API n√£o dispon√≠vel.</td></tr>';
      }
    }
  }
  
  function renderMaintenanceTable(maintenances) {
    console.log(`Renderizando tabela com ${maintenances.length} manuten√ß√µes`);
    
    const tableBody = document.getElementById('maintenance-tbody');
    if (!tableBody) {
      console.error("Elemento #maintenance-tbody n√£o encontrado!");
      return;
    }
    
    // Limpar tabela
    tableBody.innerHTML = '';
    
    // Se n√£o h√° dados, mostrar mensagem
    if (!maintenances || maintenances.length === 0) {
      tableBody.innerHTML = '<tr><td colspan="10" class="text-center">Nenhuma manuten√ß√£o encontrada.</td></tr>';
      return;
    }
    
    // Renderizar cada linha
    maintenances.forEach(item => {
      const row = document.createElement('tr');
      
      // Simplifica√ß√£o extrema do HTML da linha
      row.innerHTML = `
        <td>${item.id || '-'}</td>
        <td>${item.tipoEquipamento || '-'} (${item.placaOuId || '-'})</td>
        <td>${item.tipoManutencao || '-'}</td>
        <td>${item.dataRegistro || '-'}</td>
        <td>${item.responsavel || '-'}</td>
        <td>${item.area || '-'}</td>
        <td>${item.localOficina || '-'}</td>
        <td>${item.categoriaProblema || '-'}</td>
        <td>${item.status || 'Pendente'}</td>
        <td>
          <button class="btn-icon view-maintenance" data-id="${item.id}">üëÅÔ∏è</button>
        </td>
      `;
      
      tableBody.appendChild(row);
    });
    
    // Configurar listeners para a√ß√µes na tabela
    setupTableActionListeners();
  }
  
  function setupTableActionListeners() {
    const tableBody = document.getElementById('maintenance-tbody');
    if (!tableBody) return;
    
    // Usar delega√ß√£o de eventos
    tableBody.addEventListener('click', function(event) {
      const button = event.target.closest('.btn-icon');
      if (!button) return;
      
      const maintenanceId = button.getAttribute('data-id');
      if (!maintenanceId) return;
      
      if (button.classList.contains('view-maintenance')) {
        console.log(`Visualizar manuten√ß√£o: ${maintenanceId}`);
        // Aqui iria o c√≥digo para visualizar detalhes
      }
    });
  }
  
  // API p√∫blica do m√≥dulo
  return {
    initialize,
    openMaintenanceForm,
    loadMaintenanceList
  };
})();
